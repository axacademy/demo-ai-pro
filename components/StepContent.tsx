
import React from 'react';
import type { StepResult } from '../types';
import { STEPS, LOADING_MESSAGES, LOADING_SUB_MESSAGES } from '../constants';
import { LoadingProgress } from './LoadingProgress';
import { SAMPLE_PROJECT_IDEA } from '../sampleData';

declare const JSZip: any;

// This is a custom, robust parser for the specific Markdown-like format generated by the AI.
// It handles headings, nested lists (ordered/unordered), paragraphs, and multi-line content correctly.
const AIGeneratedMarkdownParser = (text: string): string => {
    // 1. Pre-processing: Clean up the raw text
    const cleanedText = text
        .replace(/\s*---*\*출처\*\*[\s\S]*$/, '') // Remove source blocks at the end
        .replace(/`{3}[\s\S]*?`{3}/g, '')       // Remove code blocks
        .replace(/^####/gm, '###') // Normalize headings to h3 for consistency
        .trim();

    const lines = cleanedText.split('\n');
    let html = '';
    const listStack: { type: 'ul' | 'ol'; indent: number }[] = [];

    // Helper to apply inline formatting (e.g., bold)
    const processInline = (line: string): string => {
        return line.replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold text-gray-900">$1</strong>');
    };

    // Helper to safely close lists based on indentation
    const closeLists = (targetIndent = -1) => {
        // This is the key fix: It should only close lists with an indent GREATER than
        // the target indent. Using >= was causing the parent list to close prematurely when indentation returned to 0.
        while (listStack.length > 0 && listStack[listStack.length - 1].indent > targetIndent) {
            const list = listStack.pop();
            html += `</li></${list!.type}>`;
        }
    };

    lines.forEach(line => {
        const indent = line.match(/^\s*/)?.[0].length || 0;
        const trimmedLine = line.trim();

        if (trimmedLine === '') return;

        // Close lists if indentation decreases. This handles un-nesting.
        closeLists(indent);
        
        const currentList = listStack[listStack.length - 1];

        // 2. Handle Headings
        const headingMatch = trimmedLine.match(/^(#+)\s+(.*)/);
        if (headingMatch) {
            // Close any remaining lists before a heading starts.
            closeLists();
            const level = headingMatch[1].length <= 2 ? 2 : 3; // Treat as h2 or h3
            const content = processInline(headingMatch[2]);
            const textClass = level === 2 ? 'text-2xl' : 'text-xl';
            html += `<h${level} class="${textClass} font-bold text-[#1F2358] mt-8 mb-4">${content}</h${level}>`;
            return;
        }

        // 3. Handle Lists
        const olMatch = trimmedLine.match(/^(\d+)\.\s+(.*)/);
        const ulMatch = trimmedLine.match(/^([*•-])\s+(.*)/);
        
        if (olMatch || ulMatch) {
            const listType = olMatch ? 'ol' : 'ul';
            const content = olMatch ? olMatch[2] : ulMatch![2];
            
            if (!currentList || indent > currentList.indent) {
                // Start a new nested list
                listStack.push({ type: listType, indent });
                const listClass = listType === 'ol' ? 'list-decimal' : 'list-disc';
                html += `<${listType} class="${listClass} pl-5 mt-2 space-y-2">`;
            } else if (currentList.type !== listType) {
                 // Switch list type at the same level
                 html += '</li>';
                 const listClass = listType === 'ol' ? 'list-decimal' : 'list-disc';
                 html += `</${currentList.type}><${listType} class="${listClass} pl-5 mt-2 space-y-2">`;
                 listStack[listStack.length - 1] = { type: listType, indent };
            } else {
                // New item in the same list
                html += '</li>';
            }
            
            html += `<li class="leading-relaxed">${processInline(content)}`;
        } else {
            // 4. Handle Paragraphs and Continuation Text
            if (currentList) {
                 // This is continuation text for the last list item
                html += `<div class="mt-1">${processInline(trimmedLine)}</div>`;
            } else {
                html += `<p class="mb-4 leading-relaxed">${processInline(trimmedLine)}</p>`;
            }
        }
    });

    closeLists(); // Close any remaining open lists at the end
    return html;
};


const MarkdownViewer: React.FC<{ text: string }> = ({ text }) => {
    return (
        <div
            className="prose max-w-none text-gray-800 text-base"
            dangerouslySetInnerHTML={{ __html: AIGeneratedMarkdownParser(text) }}
        />
    );
};


interface StepContentProps {
  currentStep: number;
  projectIdea: string;
  setProjectIdea: (idea: string) => void;
  stepResults: StepResult[];
  isLoading: boolean;
  error: string | null;
  onReset: () => void;
}

export const StepContent: React.FC<StepContentProps> = ({
  currentStep,
  projectIdea,
  setProjectIdea,
  stepResults,
  isLoading,
  error,
  onReset
}) => {
  const handleDownloadAllImages = async (imageUrls: string[], zipFileName: string) => {
    if (!imageUrls || imageUrls.length === 0 || typeof JSZip === 'undefined') {
      console.error("JSZip is not loaded or there are no images to download.");
      return;
    }

    try {
        const zip = new JSZip();
        const folder = zip.folder("ui-prototypes");
        if (!folder) throw new Error("Could not create a folder in the zip file.");

        await Promise.all(imageUrls.map(async (url, index) => {
            const base64Data = url.split(',')[1];
            if (base64Data) {
                folder.file(`prototype_screen_${index + 1}.png`, base64Data, { base64: true });
            }
        }));

        const content = await zip.generateAsync({ type: 'blob' });

        const link = document.createElement('a');
        link.href = URL.createObjectURL(content);
        link.download = zipFileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(link.href);
    } catch (err) {
        console.error("Error creating zip file:", err);
        // You might want to show an error message to the user here.
    }
  };

  const handlePrint = () => {
    window.print();
  };

  if (isLoading) {
    const stepForLoading = currentStep + 1;
    const subMessages = LOADING_SUB_MESSAGES[stepForLoading] || [];
    return (
        <LoadingProgress
            mainMessage={LOADING_MESSAGES[stepForLoading] || 'AI가 분석 중입니다...'}
            subMessages={subMessages}
        />
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border-l-4 border-red-400 p-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <p className="text-sm text-red-700">{error}</p>
          </div>
        </div>
      </div>
    );
  }
  
  // Final completion screen / Sample view
  if (currentStep > STEPS.length) {
    const isSample = stepResults.length > 0 && stepResults[0].content === SAMPLE_PROJECT_IDEA;
    const title = isSample ? "AI프로젝트 기획 서비스(예시)" : "프로젝트 기획 완료!";
    const description = isSample 
      ? "AI 컨설턴트가 생성하는 AI프로젝트 기획의 예시입니다."
      : "모든 단계가 성공적으로 완료되었습니다. 생성된 전체 내용을 아래에서 확인해주세요.";

    return (
      <div>
        <div className="text-center pb-8 mb-8 print:hidden">
          <svg className="mx-auto h-16 w-16 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h2 className="mt-6 text-4xl font-extrabold text-[#1F2358] tracking-tight">{title}</h2>
          <p className="mt-4 text-lg text-gray-600 max-w-3xl mx-auto">{description}</p>
        </div>

        <div className="space-y-12">
          {STEPS
            .map(stepInfo => {
              const result = stepResults.find(r => r.step === stepInfo.number);
              if (!result) return null;

              return (
                  <section key={stepInfo.number} className="bg-white p-8 rounded-xl shadow-lg ring-1 ring-gray-900/5" aria-labelledby={`step-title-${stepInfo.number}`}>
                      <div className="flex items-center justify-between gap-4 border-b border-gray-200 pb-5">
                          <div className="flex items-center gap-4">
                              <span className="flex h-12 w-12 items-center justify-center rounded-full bg-blue-100 text-xl font-bold text-[#3A60F8] shrink-0">
                                  {stepInfo.number}
                              </span>
                              <div>
                                  <p className="text-sm font-semibold text-[#3A60F8]">CHAPTER {stepInfo.number}</p>
                                  <h2 id={`step-title-${stepInfo.number}`} className="text-3xl font-extrabold text-[#1F2358] mt-1">
                                      {stepInfo.title}
                                  </h2>
                              </div>
                          </div>
                          {stepInfo.number === 6 && Array.isArray(result.content) && result.content.length > 0 && (
                           <button
                             onClick={() => handleDownloadAllImages(result.content as string[], 'ui-prototypes.zip')}
                             className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors shrink-0 print:hidden"
                           >
                             <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
                             </svg>
                             전체 UI시안 다운로드
                           </button>
                         )}
                      </div>
                      <div className="mt-8">
                        {typeof result.content === 'string' ? (
                            <MarkdownViewer text={result.content} />
                        ) : (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                {result.content.map((src, index) => (
                                    <div key={index} className="group relative overflow-hidden rounded-lg border border-gray-200 bg-gray-50 transition-shadow duration-300 hover:shadow-xl">
                                        <img src={src} alt={`Prototype screen ${index + 1}`} className="w-full h-auto object-cover transition-transform duration-300 group-hover:scale-105"/>
                                        <div className="absolute inset-0 bg-black bg-opacity-0 transition-all duration-300 group-hover:bg-opacity-20"></div>
                                        <p className="absolute bottom-4 left-4 text-white font-bold text-lg opacity-0 transition-opacity duration-300 group-hover:opacity-100 drop-shadow-md">Screen {index + 1}</p>
                                    </div>
                                ))}
                            </div>
                        )}
                      </div>
                  </section>
              );
          })}
        </div>

        {isSample && (
            <div className="mt-12 pt-8 border-t border-gray-200 flex flex-col sm:flex-row justify-center gap-4 print:hidden">
               <button 
                 onClick={handlePrint} 
                 className="w-full sm:w-auto inline-flex items-center justify-center px-8 py-3 border border-gray-300 text-base font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 transition-colors"
               >
                 PDF로 저장
               </button>
               <button 
                 onClick={onReset} 
                 className="w-full sm:w-auto inline-flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-[#3A60F8] hover:bg-blue-700 transition-colors"
               >
                 처음으로
               </button>
            </div>
        )}
      </div>
    );
  }

  const currentStepInfo = STEPS.find(s => s.number === currentStep);
  const resultForThisStep = stepResults.find(r => r.step === currentStep);

  if (currentStep === 1) {
    return (
      <div>
        <h2 className="text-xl font-semibold text-[#1F2358]">{currentStepInfo?.title}</h2>
        <p className="mt-2 text-gray-600">{currentStepInfo?.description}</p>
        <textarea
          value={projectIdea}
          onChange={(e) => setProjectIdea(e.target.value)}
          className="mt-4 w-full h-32 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3A60F8] focus:border-transparent transition"
          placeholder="예) AI를 활용한 개인 맞춤형 여행 계획 추천 서비스"
        ></textarea>
      </div>
    );
  }

  if (!currentStepInfo) {
    return <div>현재 단계 정보를 불러올 수 없습니다.</div>;
  }

  return (
    <section className="bg-white p-8 rounded-xl shadow-lg ring-1 ring-gray-900/5" aria-labelledby={`step-title-${currentStepInfo.number}`}>
      <div className="flex items-center gap-4 border-b border-gray-200 pb-5">
        <span className="flex h-12 w-12 items-center justify-center rounded-full bg-blue-100 text-xl font-bold text-[#3A60F8] shrink-0">
          {currentStepInfo.number}
        </span>
        <div>
          <p className="text-sm font-semibold text-[#3A60F8]">CHAPTER {currentStepInfo.number}</p>
          <h2 id={`step-title-${currentStepInfo.number}`} className="text-2xl font-bold text-[#1F2358] mt-1">
            {currentStepInfo.title}
          </h2>
        </div>
      </div>
      <div className="mt-8">
        {resultForThisStep && typeof resultForThisStep.content === 'string' ? (
          <MarkdownViewer text={resultForThisStep.content} />
        ) : (
          <p className="text-gray-500">아직 생성된 내용이 없습니다.</p>
        )}
      </div>
    </section>
  );
};
